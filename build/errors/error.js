"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationError = exports.InternalServerError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.NotFoundError = exports.BaseError = void 0;
// base error class
class BaseError extends Error {
    constructor(message, status, isOperational = true) {
        super(message);
        this.status = status;
        this.isOperational = isOperational;
        Object.setPrototypeOf(this, BaseError.prototype);
    }
}
exports.BaseError = BaseError;
class NotFoundError extends BaseError {
    constructor(message = 'Not Found') {
        super(message, 404);
        Object.setPrototypeOf(this, NotFoundError.prototype);
    }
}
exports.NotFoundError = NotFoundError;
// validation error class
class ValidationError extends BaseError {
    constructor(data) {
        super("Validation Error", 400);
        this.errorData = data;
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
}
exports.ValidationError = ValidationError;
class BadRequestError extends BaseError {
    constructor(message = 'Bad Request') {
        super(message, 400);
        Object.setPrototypeOf(this, BadRequestError.prototype);
    }
}
exports.BadRequestError = BadRequestError;
class UnauthorizedError extends BaseError {
    constructor(message = 'Unauthorized') {
        super(message, 401);
        Object.setPrototypeOf(this, UnauthorizedError.prototype);
    }
}
exports.UnauthorizedError = UnauthorizedError;
class ForbiddenError extends BaseError {
    constructor(message = 'Forbidden') {
        super(message, 403);
        Object.setPrototypeOf(this, ForbiddenError.prototype);
    }
}
exports.ForbiddenError = ForbiddenError;
class InternalServerError extends BaseError {
    constructor(message = 'Internal Server Error') {
        super(message, 500);
        Object.setPrototypeOf(this, InternalServerError.prototype);
    }
}
exports.InternalServerError = InternalServerError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1CQUFtQjtBQUNuQixNQUFhLFNBQVUsU0FBUSxLQUFLO0lBR2hDLFlBQVksT0FBZSxFQUFFLE1BQWMsRUFBRSxhQUFhLEdBQUcsSUFBSTtRQUM3RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNwQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQTtRQUNsQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFcEQsQ0FBQztDQUNKO0FBVkQsOEJBVUM7QUFFRCxNQUFNLGFBQWMsU0FBUSxTQUFTO0lBQ2pDLFlBQVksT0FBTyxHQUFHLFdBQVc7UUFDN0IsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEQsQ0FBQztDQUNKO0FBeUNRLHNDQUFhO0FBdEN0Qix5QkFBeUI7QUFDekIsTUFBTSxlQUFnQixTQUFRLFNBQVM7SUFFbkMsWUFBWSxJQUE2QjtRQUNyQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7UUFDckIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQzFELENBQUM7Q0FDSjtBQThCZ0csMENBQWU7QUE1QmhILE1BQU0sZUFBZ0IsU0FBUSxTQUFTO0lBQ25DLFlBQVksT0FBTyxHQUFHLGFBQWE7UUFDL0IsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDMUQsQ0FBQztDQUNKO0FBdUJ1QiwwQ0FBZTtBQXJCdkMsTUFBTSxpQkFBa0IsU0FBUSxTQUFTO0lBQ3JDLFlBQVksT0FBTyxHQUFHLGNBQWM7UUFDaEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0NBQ0o7QUFnQndDLDhDQUFpQjtBQWQxRCxNQUFNLGNBQWUsU0FBUSxTQUFTO0lBQ2xDLFlBQVksT0FBTyxHQUFHLFdBQVc7UUFDN0IsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDekQsQ0FBQztDQUNKO0FBUzJELHdDQUFjO0FBUDFFLE1BQU0sbUJBQW9CLFNBQVEsU0FBUztJQUN2QyxZQUFZLE9BQU8sR0FBRyx1QkFBdUI7UUFDekMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM5RCxDQUFDO0NBQ0o7QUFFMkUsa0RBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYmFzZSBlcnJvciBjbGFzc1xuZXhwb3J0IGNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0dXM6IG51bWJlclxuICAgIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyLCBpc09wZXJhdGlvbmFsID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKVxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c1xuICAgICAgICB0aGlzLmlzT3BlcmF0aW9uYWwgPSBpc09wZXJhdGlvbmFsXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBCYXNlRXJyb3IucHJvdG90eXBlKVxuXG4gICAgfVxufVxuXG5jbGFzcyBOb3RGb3VuZEVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gJ05vdCBGb3VuZCcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgNDA0KVxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTm90Rm91bmRFcnJvci5wcm90b3R5cGUpXG4gICAgfVxufVxuXG5cbi8vIHZhbGlkYXRpb24gZXJyb3IgY2xhc3NcbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgZXJyb3JEYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+W11cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBSZWNvcmQ8c3RyaW5nLHN0cmluZz5bXSkge1xuICAgICAgICBzdXBlcihcIlZhbGlkYXRpb24gRXJyb3JcIiwgNDAwKVxuICAgICAgICB0aGlzLmVycm9yRGF0YSA9IGRhdGFcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUpXG4gICAgfVxufVxuXG5jbGFzcyBCYWRSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSAnQmFkIFJlcXVlc3QnKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIDQwMClcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEJhZFJlcXVlc3RFcnJvci5wcm90b3R5cGUpXG4gICAgfVxufVxuXG5jbGFzcyBVbmF1dGhvcml6ZWRFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9ICdVbmF1dGhvcml6ZWQnKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIDQwMSlcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuYXV0aG9yaXplZEVycm9yLnByb3RvdHlwZSlcbiAgICB9XG59XG5cbmNsYXNzIEZvcmJpZGRlbkVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gJ0ZvcmJpZGRlbicpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgNDAzKVxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRm9yYmlkZGVuRXJyb3IucHJvdG90eXBlKVxuICAgIH1cbn1cblxuY2xhc3MgSW50ZXJuYWxTZXJ2ZXJFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIDUwMClcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludGVybmFsU2VydmVyRXJyb3IucHJvdG90eXBlKVxuICAgIH1cbn1cblxuZXhwb3J0IHsgTm90Rm91bmRFcnJvciwgQmFkUmVxdWVzdEVycm9yLCBVbmF1dGhvcml6ZWRFcnJvciwgRm9yYmlkZGVuRXJyb3IsIEludGVybmFsU2VydmVyRXJyb3IsIFZhbGlkYXRpb25FcnJvciB9Il19